<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation=" http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd 
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd 
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd">

	<!-- 导入外部的properties配置文件 -->
	<!--<context:property-placeholder location="classpath:db.properties" />-->

	<!-- 配置数据源 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="com.mysql.jdbc.Driver"/>
		<property name="jdbcUrl" value="jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=UTF-8" />
		<property name="user" value="root" />
		<property name="password" value="root" />
        <!--指定连接数据库连接池的最小连接数 -->
        <property name="minPoolSize" value="3" />
        <!--连接池中保留的最大连接数。Default: 15 -->
        <property name="maxPoolSize" value="15" />
        <!--指定连接数据库连接池的初始化连接数 -->
        <property name="initialPoolSize" value="3" />
        <!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
        <property name="acquireIncrement" value="3" />
        <!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0-->
        <property name="maxIdleTime" value="1800" />
        <!-- 定义所有连接测试都执行的测试语句 -->
        <property name="preferredTestQuery" value="SELECT 1"/>
        <!--每60秒检查所有连接池中的空闲连接。Default: 0 -->
        <property name="idleConnectionTestPeriod" value="60" />
        <!--  -->
        <property name="breakAfterAcquireFailure" value="true" />
	</bean>
	
	<!-- 配置mybatis的session工厂,名称必须是sqlSessionFactory才能实现org.mybatis.spring.mapper.MapperScannerConfigurer自动注入 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<property name="configLocation" value="classpath:mybatis.xml"/>
		<property name="mapperLocations" value="classpath:com/baoge/business/mapper/*.xml"/>
	</bean>
	
	<!-- 配置sqlSessionTemplate，封装操作数据库的繁琐操作 -->
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<!-- 采用的是构造方法形式注入 -->
		<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"/>
	</bean>
	
	<!-- 配置事务管理器，数据源的事务管理 -->
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	
	<!-- 事务通知 -->
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<!-- 增删改方法必须有事务，且遇到异常时异常时回滚,必须有事务 -->
			<tx:method name="insert*" read-only="false" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="update*" read-only="false" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="delete*" read-only="false" propagation="REQUIRED" rollback-for="Exception"/>

			<!-- 其他方法只读，是否有实物决定于是否运行在有事务的环境中，则方法成为事务的一部分，否则没有事务 -->
			<tx:method name="*" read-only="true" propagation="SUPPORTS"/>
		</tx:attributes>
	</tx:advice>
	
	<!-- 事务的切面边界 -->
	<aop:config>
		<aop:pointcut expression="execution(* com.baoge.business.service.*.*(..))" id="pt"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="pt"/>
	</aop:config>
	
	<!-- spring 注解扫描，不要扫描controller,不去除会影响事务管理 -->
	<context:component-scan base-package="com.baoge.business">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
	
	<!-- 配置 转换器，对于在basePackage设置的包（包括子包）下的接口类，如果在Mapper.xml文件中定义过，
	将被转换成spring的BEAN，在调用 的地方通过@Autowired方式将可以注入接口实例-->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.baoge.business.dao"/>
	</bean>
	
</beans>